{"version":3,"sources":["MessageTypes.ts","styles.ts","components/SensorCard.tsx","QueueReader.ts","components/ConnectionCard.tsx","components/StatusDisplay.tsx","azure.config.ts","components/App.tsx","index.tsx","defaultTheme.ts","logo.svg"],"names":["TypeID","APP","styled","div","_templateObject","Object","taggedTemplateLiteral","LOGO","img","_templateObject2","APPLICATION_NAME","h1","_templateObject3","p","theme","primary","STATUS_DISPLAY","_templateObject4","CARD","_templateObject5","secondary","SENSOR_VALUE","_templateObject6","CONNECTION_CARD","_templateObject7","CONNECTION_ICON","_templateObject8","connected","CARD_TYPE","_templateObject9","OUTDATED","_templateObject10","SensorCard","_ref","sensorData","connectionStatus","typeID","data","react_default","a","createElement","nothingReceivedYet","src","concat","alt","width","height","value","unit","ConnectionCard","Fragment","defaultData","instanceID","location","timestamp","heartBeatObject","heartBeatReceived","StatusDisplay","_useState","useState","_useState2","slicedToArray","light","setLight","_useState3","_useState4","lightReceived","setLightReceived","_useState5","_useState6","temperature","setTemperature","_useState7","_useState8","temperatureReceived","setTemperatureReceived","_useState9","_useState10","humidity","setHumidity","_useState11","_useState12","humidityReceived","setHumidityReceived","_useState13","_useState14","co2","setCo2","_useState15","_useState16","co2Received","setCo2Received","_useState17","_useState18","lamp","setLamp","_useState19","_useState20","heater","setHeater","_useState21","_useState22","humidifier","setHumidifier","_useState23","_useState24","fan","setFan","_useState25","_useState26","setConnected","messageHandler","asyncToGenerator","StatusDisplay_regeneratorRuntime","mark","_callee","message","wrap","_context","prev","next","console","log","body","t0","lightSimulator","temperatureSimulator","humiditySimulator","co2Simulator","lampSimulator","heaterSimulator","humidifierSimulator","fanSimulator","abrupt","stop","_x","apply","this","arguments","useEffect","sbClient","ServiceBusClient","sensorReciever","createReceiver","actuatorReciever","myErrorHandler","_ref2","_regeneratorRuntime","_callee2","error","_context2","_x2","subscribe","processMessage","processError","subToSensors","fetch","then","response","json","setInterval","ConnectionCard_ConnectionCard","SensorCard_SensorCard","App","logo","StatusDisplay_StatusDisplay","GlobalStyle","createGlobalStyle","src_templateObject","ReactDOM","createRoot","document","getElementById","render","StrictMode","styled_components_browser_esm","components_App","module","exports","__webpack_require__"],"mappings":"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","file":"static/js/main.3e9b9a61.chunk.js","sourcesContent":["export enum TypeID {\n  light = \"Light Sensor\",\n  lightSimulator = \"light-virtual\",\n  humidity = \"Humidity Sensor\",\n  humiditySimulator = \"humidity-virtual\",\n  temperature = \"Temperature Sensor\",\n  temperatureSimulator = \"temperature-virtual\",\n  co2Simulator = \"co2-virtual\",\n  lamp = \"Lamp\",\n  lampSimulator = \"lamp-virtual\",\n  heater = \"Heater\",\n  heaterSimulator = \"heater-virtual\",\n  humidifier = \"Humidifier\",\n  humidifierSimulator = \"humidifier-virtual\",\n  fan = \"Fan\",\n  fanSimulator = \"fan-virtual\",\n  nothingReceivedYet = \"No Data\",\n}\n\nexport type MessageBody = {\n  typeID: TypeID;\n  instanceID: string;\n  location: string;\n  timestamp: string;\n  data: {\n    value: number;\n    unit?: string;\n  };\n};\n","import styled from \"styled-components\";\n\nexport const APP = styled.div`\n  padding: 40px;\n`;\n\nexport const LOGO = styled.img`\n  margin-right: 30px;\n  margin-left: 20px;\n`;\n\nexport const APPLICATION_NAME = styled.h1`\n  display: inline;\n  color: ${(p) => p.theme.primary};\n`;\n\nexport const STATUS_DISPLAY = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 30px;\n  flex-flow: row wrap;\n  padding-left: 40px;\n  padding-right: 40px;\n`;\n\nexport const CARD = styled.div`\n  margin-left: 20px;\n  margin-right: 20px;\n  margin-bottom: 40px;\n  padding: 20px;\n  padding-bottom: 40px;\n  border: 3px solid ${(p) => p.theme.secondary};\n  border-radius: 10px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  height: 300px;\n  width: 230px;\n  font-size: 20px;\n`;\n\nexport const SENSOR_VALUE = styled.p`\n  color: ${(p) => p.theme.primary};\n  font-size: 40px;\n`;\n\nexport const CONNECTION_CARD = styled.div`\n  /* display: inline-block; */\n  border: 3px solid ${(p) => p.theme.secondary};\n  border-radius: 3px;\n  float: right;\n  /* margin: 10px; */\n  padding: 10px;\n`;\n\ntype Props = { connected: boolean };\nexport const CONNECTION_ICON = styled.div`\n  border-radius: 50%;\n  background-color: red;\n  background-color: ${(p: Props) => (p.connected ? \"green\" : \"red\")};\n  height: 15px;\n  width: 15px;\n  display: inline-block;\n  margin-right: 10px;\n`;\n\nexport const CARD_TYPE = styled.h1`\n  color: ${(p) => p.theme.secondary};\n  width: 100%;\n  margin-bottom: 20px;\n`;\n\nexport const OUTDATED = styled.div`\n  /* position: absolute; */\n  /* opacity: 0.4; */\n  color: red;\n  /* transform: rotate(45deg); */\n  ::before {\n    top: 100px;\n    content: \"OUTDATED\";\n  }\n`;\n","import { MessagingError } from \"@azure/service-bus\";\nimport React from \"react\";\nimport { MessageBody, TypeID } from \"../MessageTypes\";\nimport { CARD, SENSOR_VALUE, OUTDATED } from \"../styles\";\n\ntype Props = {\n  sensorData: MessageBody;\n  connectionStatus?: boolean;\n};\n\nexport const SensorCard: React.FC<Props> = ({\n  sensorData,\n  connectionStatus,\n}) => {\n  const { typeID, data } = sensorData;\n  return (\n    <CARD>\n      {typeID !== TypeID.nothingReceivedYet && connectionStatus === false ? <OUTDATED /> : <p>{typeID}</p>}\n      <img src={`${typeID}.svg`} alt={typeID} width=\"75\" height=\"75\" />\n      <SENSOR_VALUE>\n        {data.value} {data.unit}\n      </SENSOR_VALUE>\n    </CARD>\n  );\n};\n","import { delay, ServiceBusClient, ServiceBusMessage } from \"@azure/service-bus\";\nimport {\n  messagingConnectionString,\n  topicSensorData,\n  topicActuatorState,\n  subscriptionName,\n} from \"./azure.config\";\n\nexport const subToSensors = (\n  messageHandler: (message: any) => Promise<any>\n) => {\n  const sbClient = new ServiceBusClient(messagingConnectionString);\n  const sensorReciever = sbClient.createReceiver(\n    topicSensorData,\n    subscriptionName\n  );\n  const actuatorReciever = sbClient.createReceiver(\n    topicActuatorState,\n    subscriptionName\n  );\n\n  const myMessageHandler = async (message: any) => {\n    console.log(message)\n  }\n\n  const myErrorHandler = async (error: any) => {\n    console.log(error);\n  };\n\n  sensorReciever.subscribe({\n    processMessage: messageHandler,\n    processError: myErrorHandler,\n  });\n\n  actuatorReciever.subscribe({\n    processMessage: messageHandler,\n    processError: myErrorHandler,\n  })\n};\n","import React from \"react\";\nimport { CONNECTION_CARD, CONNECTION_ICON } from \"../styles\";\n\ntype Props = { connected: boolean };\nexport const ConnectionCard: React.FC<Props> = ({ connected }) => {\n  return (\n    <CONNECTION_CARD>\n      <CONNECTION_ICON connected={connected} />\n      Device {connected || <>not</>} connected\n    </CONNECTION_CARD>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { SensorCard } from \"./SensorCard\";\nimport { ActuatorCard } from \"./ActuatorCard\";\nimport { CARD_TYPE, STATUS_DISPLAY } from \"../styles\";\nimport { subToSensors } from \"../QueueReader\";\nimport { ServiceBusMessage } from \"@azure/service-bus\";\nimport { TypeID, MessageBody } from \"../MessageTypes\";\nimport { ConnectionCard } from \"./ConnectionCard\";\nimport { CosmosClient } from \"@azure/cosmos\";\n\nconst defaultData: MessageBody = {\n  typeID: TypeID.nothingReceivedYet,\n  instanceID: \"\",\n  location: \"\",\n  timestamp: \"\",\n  data: {\n    value: 0,\n    unit: \"\",\n  },\n};\n\nconst heartBeatObject = {\n  connected: false,\n  heartBeatReceived: false,\n};\n\nexport const StatusDisplay = () => {\n  const [light, setLight] = useState<MessageBody>(defaultData);\n  const [lightReceived, setLightReceived] = useState(heartBeatObject);\n  const [temperature, setTemperature] = useState<MessageBody>(defaultData);\n  const [temperatureReceived, setTemperatureReceived] = useState(\n    heartBeatObject\n  );\n  const [humidity, setHumidity] = useState<MessageBody>(defaultData);\n  const [humidityReceived, setHumidityReceived] = useState(heartBeatObject);\n  const [co2, setCo2] = useState<MessageBody>(defaultData);\n  const [co2Received, setCo2Received] = useState(heartBeatObject);\n  const [lamp, setLamp] = useState<MessageBody>(defaultData);\n  const [heater, setHeater] = useState<MessageBody>(defaultData);\n  const [humidifier, setHumidifier] = useState<MessageBody>(defaultData);\n  const [fan, setFan] = useState<MessageBody>(defaultData);\n  const [connected, setConnected] = useState({\n    connected: false,\n    heartBeatReceived: false,\n  });\n\n  const messageHandler = async (message: ServiceBusMessage) => {\n    console.log(message.body);\n    setConnected({ connected: true, heartBeatReceived: true });\n    switch (message.body.typeID) {\n      case TypeID.light:\n      case TypeID.lightSimulator:\n        setLight(message.body);\n        setLightReceived({ connected: true, heartBeatReceived: true });\n        break;\n      case TypeID.temperature:\n      case TypeID.temperatureSimulator:\n        setTemperature(message.body);\n        setTemperatureReceived({ connected: true, heartBeatReceived: true });\n        break;\n      case TypeID.humidity:\n      case TypeID.humiditySimulator:\n        setHumidity(message.body);\n        setHumidityReceived({ connected: true, heartBeatReceived: true });\n        break;\n      case TypeID.co2Simulator:\n        setCo2(message.body);\n        setCo2Received({ connected: true, heartBeatReceived: true });\n        break;\n      case TypeID.lamp:\n      case TypeID.lampSimulator:\n        setLamp(message.body);\n        break;\n      case TypeID.heater:\n      case TypeID.heaterSimulator:\n        setHeater(message.body);\n        break;\n      case TypeID.humidifier:\n      case TypeID.humidifierSimulator:\n        setHumidifier(message.body);\n        break;\n      case TypeID.fan:\n      case TypeID.fanSimulator:\n        setFan(message.body);\n    }\n  };\n\n  useEffect(() => subToSensors(messageHandler), []);\n  useEffect(() => {\n    fetch(\n      \"https://smart-greenhouse-cloud-services.azurewebsites.net/api/read-from-database?code=W7qOp0zom2o0i_zDJNtURXSuvkyHVNS-ojTNqAwYnEh8AzFuiYfUAQ==\"\n    )\n      .then((response) => response.json())\n      .then((json) => {\n        json.light && setLight(json.light);\n        json.humidity && setHumidity(json.humidity);\n        json.temperature && setTemperature(json.temperature);\n        json.co2 && setCo2(json.co2);\n        json.lamp && setLamp(json.lamp);\n        json.humidifier && setHumidifier(json.humidifier);\n        json.heater && setHeater(json.heater);\n        json.fan && setFan(json.fan);\n      });\n  }, []);\n\n  /**\n   * during the runtime of the application proof if you are receiving messages every 30 seconds\n   */\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (connected.heartBeatReceived === false) {\n        setConnected({ connected: false, heartBeatReceived: false });\n      } else {\n        setConnected({ connected: true, heartBeatReceived: false });\n      }\n      if (lightReceived.heartBeatReceived === false) {\n        setLightReceived({ connected: false, heartBeatReceived: false });\n      } else {\n        setLightReceived({ connected: true, heartBeatReceived: false });\n      }\n      if (temperatureReceived.heartBeatReceived === false) {\n        setTemperatureReceived({ connected: false, heartBeatReceived: false });\n      } else {\n        setTemperatureReceived({ connected: true, heartBeatReceived: false });\n      }\n      if (humidityReceived.heartBeatReceived === false) {\n        setHumidityReceived({ connected: false, heartBeatReceived: false });\n      } else {\n        setHumidityReceived({ connected: true, heartBeatReceived: false });\n      }\n      if (co2Received.heartBeatReceived === false) {\n        setCo2Received({ connected: false, heartBeatReceived: false });\n      } else {\n        setCo2Received({ connected: true, heartBeatReceived: false });\n      }\n    }, 30000);\n    // return clearInterval(interval);\n  }, []);\n\n  return (\n    <>\n      <ConnectionCard connected={connected.connected} />\n      <STATUS_DISPLAY>\n        <CARD_TYPE>Sensors</CARD_TYPE>\n        <SensorCard\n          sensorData={light}\n          connectionStatus={lightReceived.connected}\n        />\n        <SensorCard\n          sensorData={temperature}\n          connectionStatus={temperatureReceived.connected}\n        />\n        <SensorCard\n          sensorData={humidity}\n          connectionStatus={humidityReceived.connected}\n        />\n        <SensorCard sensorData={co2} connectionStatus={co2Received.connected} />\n        {/* <SensorCard name={\"isWindowOpen\"} value={state.isWindowOpen} /> */}\n      </STATUS_DISPLAY>\n      <STATUS_DISPLAY>\n        <CARD_TYPE>Actuators</CARD_TYPE>\n        <SensorCard sensorData={lamp} />\n        <SensorCard sensorData={heater} />\n        <SensorCard sensorData={humidifier} />\n        <SensorCard sensorData={fan} />\n      </STATUS_DISPLAY>\n    </>\n  );\n};\n","export const messagingConnectionString =\n  \"Endpoint=sb://greenhouse-iot.servicebus.windows.net/;SharedAccessKeyName=smart-greenhouse;SharedAccessKey=wq9l2WnId9+TQIiNsoH81x4Gn9k4sRsjCtC/H4AqyhA=\";\nexport const topicSensorData = \"sensor-data\";\nexport const topicActuatorState = \"actuator-state\";\nexport const subscriptionName = \"UISubscription\";\n\nexport const dbConnectionString =\n  \"AccountEndpoint=https://smart-greenhouse-db.documents.azure.com:443/;AccountKey=oKq9BcX41G9I9I1kSmFhhhNvcLKHBqDpuSvcJfEbWgV9Fpvfn6iykiBg3K8eY2gJeoh6XcLF2iyIP9yiryrdBA==;\";\nexport const dbId = \"GreenhouseDB\";\nexport const dbSensorContainerId = \"SensorData\";\nexport const dbActuatorContainerId = \"SystemState\";\n","import React from \"react\";\nimport logo from \"../logo.svg\";\nimport { APP, LOGO, APPLICATION_NAME } from \"../styles\";\nimport { StatusDisplay } from \"./StatusDisplay\";\n\nfunction App() {\n  return (\n    <APP>\n      <LOGO src={logo} alt=\"logo\" width=\"75\" height=\"75\" />\n      <APPLICATION_NAME>SMART PLANTHOUSE</APPLICATION_NAME>\n      <StatusDisplay />\n    </APP>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./components/App\";\nimport { ThemeProvider, createGlobalStyle } from \"styled-components\";\nimport { defaultTheme } from \"./defaultTheme\";\n\nconst GlobalStyle = createGlobalStyle`\n*{\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    font-family: \"Montserrat\", sans-serif;\n    background-color: #ECF8F2\n}\n`;\n\nconst root = ReactDOM.createRoot(\n  document.getElementById(\"root\") as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <ThemeProvider theme={defaultTheme}>\n      <GlobalStyle />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>\n);\n","export const defaultTheme = {\n    primary: \"#5ABA63\",\n    secondary: \"#252626\",\n}","module.exports = __webpack_public_path__ + \"static/media/logo.7a907a46.svg\";"],"sourceRoot":""}