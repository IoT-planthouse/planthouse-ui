{"version":3,"sources":["styles.ts","components/SensorCard.tsx","QueueReader.ts","MessageTypes.ts","components/ConnectionCard.tsx","components/StatusDisplay.tsx","azure.config.ts","components/App.tsx","index.tsx","defaultTheme.ts","logo.svg"],"names":["APP","styled","div","_templateObject","Object","taggedTemplateLiteral","LOGO","img","_templateObject2","APPLICATION_NAME","h1","_templateObject3","p","theme","primary","STATUS_DISPLAY","_templateObject4","CARD","_templateObject5","secondary","SENSOR_VALUE","_templateObject6","CONNECTION_CARD","_templateObject7","CONNECTION_ICON","_templateObject8","connected","CARD_TYPE","_templateObject9","SensorCard","_ref","sensorData","typeID","data","react_default","a","createElement","src","concat","alt","width","height","value","unit","TypeID","ConnectionCard","Fragment","defaultData","nothingReceivedYet","instanceID","location","timestamp","StatusDisplay","_useState","useState","_useState2","slicedToArray","light","setLight","_useState3","_useState4","temperature","setTemperature","_useState5","_useState6","humidity","setHumidity","_useState7","_useState8","co2","setCo2","_useState9","_useState10","lamp","setLamp","_useState11","_useState12","heater","setHeater","_useState13","_useState14","humidifier","setHumidifier","_useState15","_useState16","fan","setFan","_useState17","heartBeatReceived","_useState18","setConnected","messageHandler","asyncToGenerator","StatusDisplay_regeneratorRuntime","mark","_callee","message","wrap","_context","prev","next","console","log","body","t0","lightSimulator","temperatureSimulator","humiditySimulator","co2Simulator","lampSimulator","heaterSimulator","humidifierSimulator","fanSimulator","abrupt","stop","_x","apply","this","arguments","useEffect","sbClient","ServiceBusClient","sensorReciever","createReceiver","actuatorReciever","myErrorHandler","_ref2","_regeneratorRuntime","_callee2","error","_context2","_x2","subscribe","processMessage","processError","subToSensors","fetch","then","response","json","setInterval","ConnectionCard_ConnectionCard","SensorCard_SensorCard","App","logo","StatusDisplay_StatusDisplay","GlobalStyle","createGlobalStyle","src_templateObject","ReactDOM","createRoot","document","getElementById","render","StrictMode","styled_components_browser_esm","components_App","module","exports","__webpack_require__"],"mappings":"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","file":"static/js/main.0aaa6337.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const APP = styled.div`\n  padding: 40px;\n`;\n\nexport const LOGO = styled.img`\n  margin-right: 30px;\n  margin-left: 20px;\n`;\n\nexport const APPLICATION_NAME = styled.h1`\n  display: inline;\n  color: ${(p) => p.theme.primary};\n`;\n\nexport const STATUS_DISPLAY = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 30px;\n  flex-flow: row wrap;\n  padding-left: 40px;\n  padding-right: 40px;\n`;\n\nexport const CARD = styled.div`\n  margin-left: 20px;\n  margin-right: 20px;\n  margin-bottom: 40px;\n  padding: 20px;\n  padding-bottom: 40px;\n  border: 3px solid ${(p) => p.theme.secondary};\n  border-radius: 10px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  height: 300px;\n  width: 230px;\n  font-size: 20px;\n`;\n\nexport const SENSOR_VALUE = styled.p`\n  color: ${(p) => p.theme.primary};\n  font-size: 40px;\n`;\n\nexport const CONNECTION_CARD = styled.div`\n  /* display: inline-block; */\n  border: 3px solid ${(p) => p.theme.secondary};\n  border-radius: 3px;\n  float: right;\n  /* margin: 10px; */\n  padding: 10px;\n`;\n\ntype Props = { connected: boolean };\nexport const CONNECTION_ICON = styled.div`\n  border-radius: 50%;\n  background-color: red;\n  background-color: ${(p: Props) => (p.connected ? \"green\" : \"red\")};\n  height: 15px;\n  width: 15px;\n  display: inline-block;\n  margin-right: 10px\n`;\n\nexport const CARD_TYPE = styled.h1`\n  color: ${(p) => p.theme.secondary};\n  width: 100%;\n  margin-bottom: 20px;\n`","import { MessagingError } from \"@azure/service-bus\";\nimport React from \"react\";\nimport { MessageBody } from \"../MessageTypes\";\nimport { CARD, SENSOR_VALUE } from \"../styles\";\n\ntype Props = {\n  sensorData: MessageBody;\n};\n\nexport const SensorCard: React.FC<Props> = ({ sensorData }) => {\n  const { typeID, data } = sensorData;\n  return (\n    <CARD>\n      <p>{typeID}</p>\n      <img src={`${typeID}.svg`} alt={typeID} width=\"75\" height=\"75\" />\n      <SENSOR_VALUE>\n        {data.value} {data.unit}\n      </SENSOR_VALUE>\n    </CARD>\n  );\n};\n","import { delay, ServiceBusClient, ServiceBusMessage } from \"@azure/service-bus\";\nimport {\n  messagingConnectionString,\n  topicSensorData,\n  topicActuatorState,\n  subscriptionName,\n} from \"./azure.config\";\n\nexport const subToSensors = (\n  messageHandler: (message: any) => Promise<any>\n) => {\n  const sbClient = new ServiceBusClient(messagingConnectionString);\n  const sensorReciever = sbClient.createReceiver(\n    topicSensorData,\n    subscriptionName\n  );\n  const actuatorReciever = sbClient.createReceiver(\n    topicActuatorState,\n    subscriptionName\n  );\n\n  const myMessageHandler = async (message: any) => {\n    console.log(message)\n  }\n\n  const myErrorHandler = async (error: any) => {\n    console.log(error);\n  };\n\n  sensorReciever.subscribe({\n    processMessage: messageHandler,\n    processError: myErrorHandler,\n  });\n\n  actuatorReciever.subscribe({\n    processMessage: messageHandler,\n    processError: myErrorHandler,\n  })\n};\n","export enum TypeID {\n  light = \"Light Sensor\",\n  lightSimulator = \"light-virtual\",\n  humidity = \"Humidity Sensor\",\n  humiditySimulator = \"humidity-virtual\",\n  temperature = \"Temperature Sensor\",\n  temperatureSimulator = \"temperature-virtual\",\n  co2Simulator = \"co2-virtual\",\n  lamp = \"Lamp\",\n  lampSimulator = \"lamp-virtual\",\n  heater = \"Heater\",\n  heaterSimulator = \"heater-virtual\",\n  humidifier = \"Humidifier\",\n  humidifierSimulator = \"humidifier-virtual\",\n  fan = \"Fan\",\n  fanSimulator = \"fan-virtual\",\n  nothingReceivedYet = \"No Data\",\n}\n\nexport type MessageBody = {\n  typeID: TypeID;\n  instanceID: string;\n  location: string;\n  timestamp: string;\n  data: {\n    value: number;\n    unit?: string;\n  };\n};\n","import React from \"react\";\nimport { CONNECTION_CARD, CONNECTION_ICON } from \"../styles\";\n\ntype Props = { connected: boolean };\nexport const ConnectionCard: React.FC<Props> = ({ connected }) => {\n  return (\n    <CONNECTION_CARD>\n      <CONNECTION_ICON connected={connected} />\n      Device {connected || <>not</>} connected\n    </CONNECTION_CARD>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { SensorCard } from \"./SensorCard\";\nimport { ActuatorCard } from \"./ActuatorCard\";\nimport { CARD_TYPE, STATUS_DISPLAY } from \"../styles\";\nimport { subToSensors } from \"../QueueReader\";\nimport { ServiceBusMessage } from \"@azure/service-bus\";\nimport { TypeID, MessageBody } from \"../MessageTypes\";\nimport { ConnectionCard } from \"./ConnectionCard\";\nimport { CosmosClient } from \"@azure/cosmos\";\n\nconst defaultData: MessageBody = {\n  typeID: TypeID.nothingReceivedYet,\n  instanceID: \"\",\n  location: \"\",\n  timestamp: \"\",\n  data: {\n    value: 0,\n    unit: \"\",\n  },\n};\n\nexport const StatusDisplay = () => {\n  const [light, setLight] = useState<MessageBody>(defaultData);\n  const [temperature, setTemperature] = useState<MessageBody>(defaultData);\n  const [humidity, setHumidity] = useState<MessageBody>(defaultData);\n  const [co2, setCo2] = useState<MessageBody>(defaultData);\n  const [lamp, setLamp] = useState<MessageBody>(defaultData);\n  const [heater, setHeater] = useState<MessageBody>(defaultData);\n  const [humidifier, setHumidifier] = useState<MessageBody>(defaultData);\n  const [fan, setFan] = useState<MessageBody>(defaultData);\n  const [connected, setConnected] = useState({\n    connected: false,\n    heartBeatReceived: false,\n  });\n\n  const messageHandler = async (message: ServiceBusMessage) => {\n    console.log(message.body);\n    setConnected({ connected: true, heartBeatReceived: true });\n    switch (message.body.typeID) {\n      case TypeID.light:\n      case TypeID.lightSimulator:\n        setLight(message.body);\n        break;\n      case TypeID.temperature:\n      case TypeID.temperatureSimulator:\n        setTemperature(message.body);\n        break;\n      case TypeID.humidity:\n      case TypeID.humiditySimulator:\n        setHumidity(message.body);\n        break;\n      case TypeID.co2Simulator:\n        setCo2(message.body);\n        break;\n      case TypeID.lamp:\n      case TypeID.lampSimulator:\n        setLamp(message.body);\n        break;\n      case TypeID.heater:\n      case TypeID.heaterSimulator:\n        setHeater(message.body);\n        break;\n      case TypeID.humidifier:\n      case TypeID.humidifierSimulator:\n        setHumidifier(message.body);\n        break;\n      case TypeID.fan:\n      case TypeID.fanSimulator:\n        setFan(message.body);\n    }\n  };\n\n  useEffect(() => subToSensors(messageHandler), []);\n  useEffect(() => {\n    fetch(\n      \"https://smart-greenhouse-cloud-services.azurewebsites.net/api/read-from-database?code=W7qOp0zom2o0i_zDJNtURXSuvkyHVNS-ojTNqAwYnEh8AzFuiYfUAQ==\"\n    )\n      .then((response) => response.json())\n      .then((json) => {\n        json.light && setLight(json.light);\n        json.humidity && setHumidity(json.humidity);\n        json.temperature && setTemperature(json.temperature);\n        json.co2 && setCo2(json.co2);\n        json.lamp && setLamp(json.lamp);\n        json.fan && setFan(json.fan);\n      });\n  }, []);\n\n  /**\n   * during the runtime of the application proof if you are receiving messages every 30 seconds\n   */\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (connected.heartBeatReceived === false) {\n        setConnected({ connected: false, heartBeatReceived: false });\n      } else {\n        setConnected({ connected: true, heartBeatReceived: false });\n      }\n    }, 30000);\n    // return clearInterval(interval);\n  }, []);\n\n  return (\n    <>\n      <ConnectionCard connected={connected.connected} />\n      <STATUS_DISPLAY>\n        <CARD_TYPE>Sensors</CARD_TYPE>\n        <SensorCard sensorData={light} />\n        <SensorCard sensorData={temperature} />\n        <SensorCard sensorData={humidity} />\n        <SensorCard sensorData={co2} />\n        {/* <SensorCard name={\"isWindowOpen\"} value={state.isWindowOpen} /> */}\n      </STATUS_DISPLAY>\n      <STATUS_DISPLAY>\n        <CARD_TYPE>Actuators</CARD_TYPE>\n        <SensorCard sensorData={lamp} />\n        <SensorCard sensorData={heater} />\n        <SensorCard sensorData={humidifier} />\n        <SensorCard sensorData={fan} />\n      </STATUS_DISPLAY>\n    </>\n  );\n};\n","export const messagingConnectionString =\n  \"Endpoint=sb://greenhouse-iot.servicebus.windows.net/;SharedAccessKeyName=smart-greenhouse;SharedAccessKey=wq9l2WnId9+TQIiNsoH81x4Gn9k4sRsjCtC/H4AqyhA=\";\nexport const topicSensorData = \"sensor-data\";\nexport const topicActuatorState = \"actuator-state\";\nexport const subscriptionName = \"UISubscription\";\n\nexport const dbConnectionString =\n  \"AccountEndpoint=https://smart-greenhouse-db.documents.azure.com:443/;AccountKey=oKq9BcX41G9I9I1kSmFhhhNvcLKHBqDpuSvcJfEbWgV9Fpvfn6iykiBg3K8eY2gJeoh6XcLF2iyIP9yiryrdBA==;\";\nexport const dbId = \"GreenhouseDB\";\nexport const dbSensorContainerId = \"SensorData\";\nexport const dbActuatorContainerId = \"SystemState\";\n","import React from \"react\";\nimport logo from \"../logo.svg\";\nimport { APP, LOGO, APPLICATION_NAME } from \"../styles\";\nimport { StatusDisplay } from \"./StatusDisplay\";\n\nfunction App() {\n  return (\n    <APP>\n      <LOGO src={logo} alt=\"logo\" width=\"75\" height=\"75\" />\n      <APPLICATION_NAME>SMART PLANTHOUSE</APPLICATION_NAME>\n      <StatusDisplay />\n    </APP>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./components/App\";\nimport { ThemeProvider, createGlobalStyle } from \"styled-components\";\nimport { defaultTheme } from \"./defaultTheme\";\n\nconst GlobalStyle = createGlobalStyle`\n*{\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    font-family: \"Montserrat\", sans-serif;\n    background-color: #ECF8F2\n}\n`;\n\nconst root = ReactDOM.createRoot(\n  document.getElementById(\"root\") as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <ThemeProvider theme={defaultTheme}>\n      <GlobalStyle />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>\n);\n","export const defaultTheme = {\n    primary: \"#5ABA63\",\n    secondary: \"#252626\",\n}","module.exports = __webpack_public_path__ + \"static/media/logo.7a907a46.svg\";"],"sourceRoot":""}